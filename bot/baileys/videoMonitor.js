// videoMonitor.js
const videoLimit = 5; // Limite di√°rio de v√≠deos permitidos
const maxWarnings = 3; // Limite de advert√™ncias antes da remo√ß√£o
const userVideoData = {}; // Objeto para armazenar dados dos usu√°rios

// Fun√ß√£o para monitorar o envio de v√≠deos
export const monitorVideos = async (conn, message) => {
    const { remoteJid: from } = message.key; // ID do grupo/conversa
    const participant = message.key.participant || message.participant || from; // ID do remetente
    const videoMessage = message.message?.videoMessage; // Verifica se a mensagem √© de v√≠deo

    // Verifique se `from` e `videoMessage` s√£o definidos
    if (!from || !videoMessage) {
        return; // Sai da fun√ß√£o se os valores essenciais estiverem indefinidos
    }

    const today = new Date().toDateString(); // Obt√©m a data de hoje

    // Inicializa os dados do usu√°rio se n√£o existir
    if (!userVideoData[participant]) {
        userVideoData[participant] = {
            count: 0,
            date: today,
            warnings: 0
        };
    }

    // Se a data armazenada n√£o for igual √† data de hoje, reseta a contagem
    if (userVideoData[participant].date !== today) {
        userVideoData[participant].count = 0; // Reseta a contagem di√°ria de v√≠deos
        userVideoData[participant].date = today; // Atualiza a data
    }

    // Incrementa a contagem de v√≠deos do usu√°rio
    userVideoData[participant].count++;

    // Verifica se o usu√°rio ultrapassou o limite di√°rio de v√≠deos
    if (userVideoData[participant].count === videoLimit) {
        const warningMessage = `@${participant.split('@')[0]}, ùëΩùíêùíÑùíÜÃÇ ùíÜùíèùíóùíäùíêùíñ ùüì ùíóùíäÃÅùíÖùíÜùíêùíî. ùë∫ùíÜ ùíéùíÇùíèùíÖùíÇùíì ùíê *ùíîùíÜùíôùíïùíê* üé•, ùíóùíêùíÑùíÜÃÇ ùíìùíÜùíÑùíÜùíÉùíÜùíìùíÇÃÅ ùíéùíÇùíäùíî ùíñùíéùíÇ ùíÇùíÖùíóùíÜùíìùíïùíÜÃÇùíèùíÑùíäùíÇ. ùë≥ùíÜùíäùíÇ ùíÇùíî ùíìùíÜùíàùíìùíÇùíî! üìú`;
        await conn.sendMessage(from, { text: warningMessage, mentions: [participant] });
    }

    // Verifica se o usu√°rio ultrapassou o limite di√°rio e recebe uma advert√™ncia
    if (userVideoData[participant].count > videoLimit) {
        userVideoData[participant].warnings++; // Incrementa a contagem de advert√™ncias

        const warningCount = userVideoData[participant].warnings;
        
        // Mensagem de advert√™ncia informando o n√∫mero atual de advert√™ncias
        const warningMessage = `@${participant.split('@')[0]}, voc√™ excedeu o limite de v√≠deos di√°rios e recebeu uma *advert√™ncia*. Total de advert√™ncias: ${warningCount}/${maxWarnings}.`;
        await conn.sendMessage(from, { text: warningMessage, mentions: [participant] });

        // Verifica se o n√∫mero de advert√™ncias atingiu o limite
        if (userVideoData[participant].warnings >= maxWarnings) {
            try {
                await conn.groupParticipantsUpdate(from, [participant], 'remove');
                delete userVideoData[participant]; // Reseta os dados do usu√°rio ap√≥s a remo√ß√£o
            } catch (error) {
                console.error(`Erro ao remover ${participant} do grupo:`, error);
            }
        } else {
            // Reseta a contagem di√°ria de v√≠deos, mas mant√©m as advert√™ncias
            userVideoData[participant].count = 0;
        }
    }
};
